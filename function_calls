<invoke name="run_terminal_cmd">
<parameter name="command">cd /c/Users/Mota/Downloads/social-fit-bolt/project && npm run dev</parameter>
<parameter name="explanation">Reiniciando o servidor de desenvolvimento</parameter>
<parameter name="is_background">true</parameter>
<parameter name="require_user_approval">false</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">project/src/App.tsx</parameter>
<parameter name="instructions">Atualizando App.tsx para usar o contexto de autenticação e proteger rotas corretamente</parameter>
<parameter name="code_edit">import React from 'react';
import { BrowserRouter as Router, Routes, Route, Navigate, useLocation } from 'react-router-dom';
import BarraNavegacao from './components/BarraNavegacao';
import Inicio from './pages/Inicio';
import Feed from './pages/Feed';
import Treinos from './pages/Treinos';
import Ranking from './pages/Ranking';
import Perfil from './pages/Perfil';
import Login from './pages/Login';
import Cadastro from './pages/Cadastro';
import { AuthProvider, useAuth } from './contexts/AuthContext';

// Componente para proteger rotas
const RequireAuth = ({ children }: { children: React.ReactNode }) => {
  const { isAuthenticated } = useAuth();
  const location = useLocation();

  if (!isAuthenticated) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  return (
    <>
      <BarraNavegacao />
      <main className="md:ml-20 px-4 py-6 max-w-4xl mx-auto">
        {children}
      </main>
    </>
  );
};

// Componente para rotas públicas
const PublicRoute = ({ children }: { children: React.ReactNode }) => {
  const { isAuthenticated } = useAuth();
  const location = useLocation();

  if (isAuthenticated) {
    return <Navigate to="/inicio" state={{ from: location }} replace />;
  }

  return <main className="px-4 py-6 max-w-4xl mx-auto">{children}</main>;
};

// Componente principal que envolve as rotas
const AppRoutes = () => {
  return (
    <div className="min-h-screen bg-gray-50">
      <Routes>
        {/* Redireciona a rota raiz com base na autenticação */}
        <Route path="/" element={<Navigate to="/login" replace />} />

        {/* Rotas públicas */}
        <Route
          path="/login"
          element={
            <PublicRoute>
              <Login />
            </PublicRoute>
          }
        />
        <Route
          path="/cadastro"
          element={
            <PublicRoute>
              <Cadastro />
            </PublicRoute>
          }
        />

        {/* Rotas protegidas */}
        <Route
          path="/inicio"
          element={
            <RequireAuth>
              <Inicio />
            </RequireAuth>
          }
        />
        <Route
          path="/feed"
          element={
            <RequireAuth>
              <Feed />
            </RequireAuth>
          }
        />
        <Route
          path="/treinos"
          element={
            <RequireAuth>
              <Treinos />
            </RequireAuth>
          }
        />
        <Route
          path="/ranking"
          element={
            <RequireAuth>
              <Ranking />
            </RequireAuth>
          }
        />
        <Route
          path="/perfil"
          element={
            <RequireAuth>
              <Perfil />
            </RequireAuth>
          }
        />

        {/* Redireciona rotas não encontradas para login */}
        <Route path="*" element={<Navigate to="/login" replace />} />
      </Routes>
    </div>
  );
};

function App() {
  return (
    <Router>
      <AuthProvider>
        <AppRoutes />
      </AuthProvider>
    </Router>
  );
}

export default App;</parameter>
<parameter name="blocking">true</parameter>
</invoke>

<invoke name="codebase_search">
<parameter name="query">Como está sendo feito o controle de autenticação e redirecionamento no projeto</parameter>
<parameter name="target_directories">["project/src"]</parameter>
<parameter name="explanation">Buscando informações sobre a implementação atual da autenticação</parameter>
</invoke>

<invoke name="read_file">
<parameter name="relative_workspace_path">project/src/App.tsx</parameter>
<parameter name="should_read_entire_file">true</parameter>
<parameter name="start_line_one_indexed">1</parameter>
<parameter name="end_line_one_indexed_inclusive">250</parameter>
<parameter name="explanation">Verificando a implementação atual das rotas e proteção</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">project/src/contexts/AuthContext.tsx</parameter>
<parameter name="instructions">Atualizando o contexto de autenticação para garantir estado inicial correto</parameter>
<parameter name="code_edit">import React, { createContext, useContext, useState, useEffect } from 'react';
import { useNavigate, useLocation } from 'react-router-dom';
import { getAuthToken, setAuthToken, clearAuthState } from '../utils/auth';

interface AuthContextType {
  isAuthenticated: boolean;
  login: (token: string, remember?: boolean) => void;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | null>(null);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const navigate = useNavigate();
  const location = useLocation();

  // Efeito para verificar autenticação inicial
  useEffect(() => {
    const checkAuth = () => {
      const token = getAuthToken();
      setIsAuthenticated(!!token);
      
      // Se não estiver autenticado e não estiver em uma rota pública
      if (!token && !location.pathname.match(/\/(login|cadastro)$/)) {
        navigate('/login', { replace: true });
      }
    };

    checkAuth();
  }, [navigate, location]);

  const login = (token: string, remember: boolean = false) => {
    setAuthToken(token, remember);
    setIsAuthenticated(true);
    
    // Redireciona para a página inicial após o login
    const intendedPath = location.state?.from?.pathname || '/inicio';
    navigate(intendedPath, { replace: true });
  };

  const logout = () => {
    clearAuthState();
    setIsAuthenticated(false);
    navigate('/login', { replace: true });
  };

  return (
    <AuthContext.Provider value={{ isAuthenticated, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth deve ser usado dentro de um AuthProvider');
  }
  return context;
}</parameter>
<parameter name="blocking">true</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">project/src/pages/Login.tsx</parameter>
<parameter name="instructions">Atualizando Login.tsx para usar o novo sistema de autenticação</parameter>
<parameter name="code_edit">import React, { useState } from 'react';
import { LogIn } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

export default function Login() {
  const { login } = useAuth();
  const [email, setEmail] = useState('');
  const [senha, setSenha] = useState('');
  const [lembrar, setLembrar] = useState(false);
  const [erro, setErro] = useState('');

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setErro('');

    try {
      // Aqui você implementaria a chamada real para a API
      // Por enquanto, vamos simular um login bem-sucedido
      login('token-teste', lembrar);
    } catch (error) {
      setErro('Email ou senha incorretos');
    }
  };

  return (
    <div className="min-h-screen flex items-center justify-center bg-gray-50 px-4">
      <div className="max-w-md w-full space-y-8 bg-white p-8 rounded-xl shadow-sm">
        <div className="text-center">
          <div className="flex justify-center">
            <LogIn className="w-12 h-12 text-blue-600" />
          </div>
          <h2 className="mt-4 text-3xl font-bold text-gray-900">Bem-vindo ao FitTracker</h2>
          <p className="mt-2 text-gray-600">Entre na sua conta para continuar</p>
        </div>

        <form className="mt-8 space-y-6" onSubmit={handleSubmit}>
          {erro && (
            <div className="bg-red-50 text-red-500 p-3 rounded-lg text-sm text-center">
              {erro}
            </div>
          )}

          <div className="space-y-4">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">
                Email
              </label>
              <input
                id="email"
                type="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1 block w-full rounded-lg border border-gray-300 px-3 py-2"
                placeholder="seu@email.com"
                required
              />
            </div>
            <div>
              <label htmlFor="senha" className="block text-sm font-medium text-gray-700">
                Senha
              </label>
              <input
                id="senha"
                type="password"
                value={senha}
                onChange={(e) => setSenha(e.target.value)}
                className="mt-1 block w-full rounded-lg border border-gray-300 px-3 py-2"
                placeholder="••••••••"
                required
              />
            </div>
            <div className="flex items-center">
              <input
                id="lembrar"
                type="checkbox"
                checked={lembrar}
                onChange={(e) => setLembrar(e.target.checked)}
                className="h-4 w-4 text-blue-600 rounded border-gray-300"
              />
              <label htmlFor="lembrar" className="ml-2 block text-sm text-gray-700">
                Lembrar-me
              </label>
            </div>
          </div>

          <button
            type="submit"
            className="w-full flex justify-center py-3 px-4 rounded-lg bg-blue-600 text-white font-medium hover:bg-blue-700"
          >
            Entrar
          </button>

          <p className="text-center text-sm text-gray-600">
            Não tem uma conta?{' '}
            <a href="/cadastro" className="text-blue-600 hover:text-blue-700">
              Cadastre-se
            </a>
          </p>
        </form>
      </div>
    </div>
  );
}</parameter>
<parameter name="blocking">true</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">project/src/main.tsx</parameter>
<parameter name="instructions">Atualizando main.tsx para limpar o estado de autenticação na inicialização</parameter>
<parameter name="code_edit">import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';
import './index.css';
import { clearAuthState } from './utils/auth';

// Limpa qualquer estado de autenticação anterior
clearAuthState();

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);</parameter>
<parameter name="blocking">true</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">project/src/utils/auth.ts</parameter>
<parameter name="instructions">Criando utilitário para gerenciar autenticação</parameter>
<parameter name="code_edit">export const AUTH_TOKEN_KEY = 'auth_token';

export const clearAuthState = () => {
  localStorage.removeItem(AUTH_TOKEN_KEY);
  sessionStorage.removeItem(AUTH_TOKEN_KEY);
};

export const getAuthToken = () => {
  return localStorage.getItem(AUTH_TOKEN_KEY) || sessionStorage.getItem(AUTH_TOKEN_KEY);
};

export const setAuthToken = (token: string, remember: boolean = false) => {
  clearAuthState();
  if (remember) {
    localStorage.setItem(AUTH_TOKEN_KEY, token);
  } else {
    sessionStorage.setItem(AUTH_TOKEN_KEY, token);
  }
};</parameter>
<parameter name="blocking">true</parameter>
</invoke>

<invoke name="edit_file">
<parameter name="target_file">project/src/components/BarraNavegacao.tsx</parameter>
<parameter name="instructions">Ajustando a posição do botão de logout para ficar visível</parameter>
<parameter name="code_edit">import React from 'react';
import { Link } from 'react-router-dom';
import { Home, Users, Dumbbell, Trophy, User, LogOut } from 'lucide-react';
import { useAuth } from '../contexts/AuthContext';

export default function BarraNavegacao() {
  const { logout } = useAuth();

  return (
    <nav className="fixed left-0 top-0 h-full w-20 bg-white shadow-md flex flex-col items-center py-4">
      <div className="flex-1 flex flex-col gap-4">
        <NavItem href="/inicio" icon={<Home />} text="Início" />
        <NavItem href="/feed" icon={<Users />} text="Feed" />
        <NavItem href="/treinos" icon={<Dumbbell />} text="Treinos" />
        <NavItem href="/ranking" icon={<Trophy />} text="Ranking" />
        <NavItem href="/perfil" icon={<User />} text="Perfil" />
      </div>
      
      {/* Botão de Logout com margem no topo */}
      <div className="mt-auto pt-4 pb-2 border-t border-gray-200 w-full flex justify-center">
        <button
          onClick={logout}
          className="p-3 rounded-lg hover:bg-gray-100 transition-colors flex flex-col items-center text-gray-700 hover:text-red-600"
          title="Sair"
        >
          <LogOut className="w-6 h-6" />
          <span className="text-xs mt-1">Sair</span>
        </button>
      </div>
    </nav>
  );
}

type NavItemProps = {
  href: string;
  icon: React.ReactNode;
  text: string;
};

function NavItem({ href, icon, text }: NavItemProps) {
  return (
    <Link
      to={href}
      className="p-3 rounded-lg hover:bg-gray-100 transition-colors flex flex-col items-center text-gray-700"
    >
      {icon}
      <span className="text-xs mt-1">{text}</span>
    </Link>
  );
}</parameter>
<parameter name="blocking">true</parameter>
</invoke>
